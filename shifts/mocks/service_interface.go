// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Bruary/staff-scheduling/shifts/models"
	mock "github.com/stretchr/testify/mock"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// CreateShift provides a mock function with given fields: ctx, req
func (_m *ServiceInterface) CreateShift(ctx context.Context, req models.CreateShiftRequest) *models.CreateShiftResponse {
	ret := _m.Called(ctx, req)

	var r0 *models.CreateShiftResponse
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateShiftRequest) *models.CreateShiftResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreateShiftResponse)
		}
	}

	return r0
}

// DeleteShift provides a mock function with given fields: ctx, req
func (_m *ServiceInterface) DeleteShift(ctx context.Context, req models.DeleteShiftRequest) *models.DeleteShiftResponse {
	ret := _m.Called(ctx, req)

	var r0 *models.DeleteShiftResponse
	if rf, ok := ret.Get(0).(func(context.Context, models.DeleteShiftRequest) *models.DeleteShiftResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeleteShiftResponse)
		}
	}

	return r0
}

// GetShifts provides a mock function with given fields: ctx, req
func (_m *ServiceInterface) GetShifts(ctx context.Context, req models.GetShiftsRequest) *models.GetShiftsResponse {
	ret := _m.Called(ctx, req)

	var r0 *models.GetShiftsResponse
	if rf, ok := ret.Get(0).(func(context.Context, models.GetShiftsRequest) *models.GetShiftsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetShiftsResponse)
		}
	}

	return r0
}

// UpdateShift provides a mock function with given fields: ctx, req
func (_m *ServiceInterface) UpdateShift(ctx context.Context, req models.UpdateShiftRequest) *models.UpdateShiftResponse {
	ret := _m.Called(ctx, req)

	var r0 *models.UpdateShiftResponse
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateShiftRequest) *models.UpdateShiftResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UpdateShiftResponse)
		}
	}

	return r0
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
