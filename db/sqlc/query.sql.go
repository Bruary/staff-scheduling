// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createShift = `-- name: CreateShift :one
INSERT INTO shifts (
        uid, work_date, shift_length_hours, user_id
    ) VALUES (
        $1, $2, $3, $4
    ) RETURNING id, created, uid, work_date, shift_length_hours, user_id, updated, deleted
`

type CreateShiftParams struct {
	Uid              string
	WorkDate         time.Time
	ShiftLengthHours float64
	UserID           int32
}

func (q *Queries) CreateShift(ctx context.Context, arg CreateShiftParams) (Shift, error) {
	row := q.db.QueryRowContext(ctx, createShift,
		arg.Uid,
		arg.WorkDate,
		arg.ShiftLengthHours,
		arg.UserID,
	)
	var i Shift
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Uid,
		&i.WorkDate,
		&i.ShiftLengthHours,
		&i.UserID,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        uid, first_name, last_name, email, password
    ) VALUES (
        $1, $2, $3, $4, $5
    ) RETURNING id, created, uid, type, first_name, last_name, email, password, updated, deleted
`

type CreateUserParams struct {
	Uid       string
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uid,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Uid,
		&i.Type,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
Select id, created, uid, type, first_name, last_name, email, password, updated, deleted from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Uid,
		&i.Type,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const getUserByUid = `-- name: GetUserByUid :one
Select id, created, uid, type, first_name, last_name, email, password, updated, deleted from users where uid = $1
`

func (q *Queries) GetUserByUid(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUid, uid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Uid,
		&i.Type,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}
