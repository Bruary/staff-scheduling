// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/Bruary/staff-scheduling/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// UsersRepoInterface is an autogenerated mock type for the UsersRepoInterface type
type UsersRepoInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, params
func (_m *UsersRepoInterface) CreateUser(ctx context.Context, params db.CreateUserParams) (db.User, error) {
	ret := _m.Called(ctx, params)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UsersRepoInterface) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	ret := _m.Called(ctx, email)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUid provides a mock function with given fields: ctx, uid
func (_m *UsersRepoInterface) GetUserByUid(ctx context.Context, uid string) (db.User, error) {
	ret := _m.Called(ctx, uid)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsersRepoInterface creates a new instance of UsersRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersRepoInterface {
	mock := &UsersRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
